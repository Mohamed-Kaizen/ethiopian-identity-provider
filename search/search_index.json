{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ethiopian Identity Provider \u00b6 \ud83d\udee0 Status: In Development \u00b6 Ethiopian Identity Provider is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates. Overview \u00b6 Ethiopian Identity Provider platform Requirements \u00b6 Backend \u00b6 Python 3.8+ Poetry (Optional) FrontEnd \u00b6 NodeJs 12 Yarn (Optional) License: MIT \u00b6","title":"Home"},{"location":"#ethiopian-identity-provider","text":"","title":"Ethiopian Identity Provider"},{"location":"#status-in-development","text":"Ethiopian Identity Provider is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates.","title":"\ud83d\udee0 Status: In Development"},{"location":"#overview","text":"Ethiopian Identity Provider platform","title":"Overview"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#backend","text":"Python 3.8+ Poetry (Optional)","title":"Backend"},{"location":"#frontend","text":"NodeJs 12 Yarn (Optional)","title":"FrontEnd"},{"location":"#license-mit","text":"","title":"License: MIT"},{"location":"backend/","text":"BackEnd \u00b6 Getting Started \u00b6 Fork repository and clone it. Shell or CMD $ git clone https://github.com/Mohamed-Kaizen/ethiopian-identity-provider/ ---> 100% Done :) install dependence \u00b6 Poetry $ cd ethiopian-identity-provider $ poetry install Resolving dependencies... ---> 100% Writing lock file Done :) Pip $ cd ethiopian-identity-provider $ pip install -r requirements.txt ---> 100% Done :) Environment Variables \u00b6 create .env in the root of the project or set your ENV add the following line into .env file or set your ENV: 1 2 3 4 5 6 7 8 DEBUG = True # change this in production ALLOWED_HOSTS = example . com , localhost , 0.0.0.0 , 127.0.0.1 # change this in production SECRET_KEY = w86k @ * ash * z ) dsxsoz + o * ne * ugb08 ( 4 nu13 % 8 ! m *+ 2 _e @ @7 hnx # change this in production and never put the production key here DATABASE_URL = sqlite : ///db.sqlite3 EMAIL_USER = example @ example . com EMAIL_PASSWORD = '' DROPBOX_OAUTH2_TOKEN = '' HOME_PAGE_URL = ''","title":"Setup"},{"location":"backend/#backend","text":"","title":"BackEnd"},{"location":"backend/#getting-started","text":"Fork repository and clone it. Shell or CMD $ git clone https://github.com/Mohamed-Kaizen/ethiopian-identity-provider/ ---> 100% Done :)","title":"Getting Started"},{"location":"backend/#install-dependence","text":"Poetry $ cd ethiopian-identity-provider $ poetry install Resolving dependencies... ---> 100% Writing lock file Done :) Pip $ cd ethiopian-identity-provider $ pip install -r requirements.txt ---> 100% Done :)","title":"install dependence"},{"location":"backend/#environment-variables","text":"create .env in the root of the project or set your ENV add the following line into .env file or set your ENV: 1 2 3 4 5 6 7 8 DEBUG = True # change this in production ALLOWED_HOSTS = example . com , localhost , 0.0.0.0 , 127.0.0.1 # change this in production SECRET_KEY = w86k @ * ash * z ) dsxsoz + o * ne * ugb08 ( 4 nu13 % 8 ! m *+ 2 _e @ @7 hnx # change this in production and never put the production key here DATABASE_URL = sqlite : ///db.sqlite3 EMAIL_USER = example @ example . com EMAIL_PASSWORD = '' DROPBOX_OAUTH2_TOKEN = '' HOME_PAGE_URL = ''","title":"Environment Variables"},{"location":"backend/command/","text":"Command \u00b6 Migration \u00b6 $ python manage.py makemigrations Migrations for 'users': users/migrations/0001_initial.py - Create model CustomUser - Create model Renew ... $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying users.0001_initial... OK ... Done :) Create super user \u00b6 $ python manage.py createsuperuser # username:$ mohamed # email:$ mohamed@etp.com # Password: $ # Repeat for confirmation: $ Done :) Running server \u00b6 $ python manage.py runserver Performing system checks... System check identified no issues (0 silenced). July 27, 2020 - 15:50:53 Django version 3.0, using settings 'etp.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C.","title":"Command"},{"location":"backend/command/#command","text":"","title":"Command"},{"location":"backend/command/#migration","text":"$ python manage.py makemigrations Migrations for 'users': users/migrations/0001_initial.py - Create model CustomUser - Create model Renew ... $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying users.0001_initial... OK ... Done :)","title":"Migration"},{"location":"backend/command/#create-super-user","text":"$ python manage.py createsuperuser # username:$ mohamed # email:$ mohamed@etp.com # Password: $ # Repeat for confirmation: $ Done :)","title":"Create super user"},{"location":"backend/command/#running-server","text":"$ python manage.py runserver Performing system checks... System check identified no issues (0 silenced). July 27, 2020 - 15:50:53 Django version 3.0, using settings 'etp.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C.","title":"Running server"},{"location":"frontend/","text":"FrontEnd \u00b6 Getting Started \u00b6 Fork repository and clone it. Shell or CMD $ git clone https://github.com/Mohamed-Kaizen/ethiopian-identity-provider-FrontEnd/ ---> 100% Done :) install dependence \u00b6 Yarn $ cd ethiopian-identity-provider $ yarn install Resolving dependencies... ---> 100% Writing lock file Done :) Npm $ cd ethiopian-identity-provider $ npm install Resolving dependencies... ---> 100% Writing lock file Done :) Running server \u00b6 Yarn $ yarn dev run-p watch:tailwind dev:sapper sapper dev postcss static/tailwind.css -o static/index.css -w > Listening on http://localhost:3000 Npm $ npm run dev run-p watch:tailwind dev:sapper sapper dev postcss static/tailwind.css -o static/index.css -w > Listening on http://localhost:3000","title":"Setup"},{"location":"frontend/#frontend","text":"","title":"FrontEnd"},{"location":"frontend/#getting-started","text":"Fork repository and clone it. Shell or CMD $ git clone https://github.com/Mohamed-Kaizen/ethiopian-identity-provider-FrontEnd/ ---> 100% Done :)","title":"Getting Started"},{"location":"frontend/#install-dependence","text":"Yarn $ cd ethiopian-identity-provider $ yarn install Resolving dependencies... ---> 100% Writing lock file Done :) Npm $ cd ethiopian-identity-provider $ npm install Resolving dependencies... ---> 100% Writing lock file Done :)","title":"install dependence"},{"location":"frontend/#running-server","text":"Yarn $ yarn dev run-p watch:tailwind dev:sapper sapper dev postcss static/tailwind.css -o static/index.css -w > Listening on http://localhost:3000 Npm $ npm run dev run-p watch:tailwind dev:sapper sapper dev postcss static/tailwind.css -o static/index.css -w > Listening on http://localhost:3000","title":"Running server"},{"location":"reference/validators/","text":"\u00b6 Collection of validators. AxesOAuth2Validator \u00b6 Django axes validator for Django OAuth Toolkit. validate_user ( self , username , password , client , request , * args , ** kwargs ) \u00b6 Check username and password correspond to a valid and active User. Set defaults for necessary request object attributes for Axes compatibility. Parameters: Name Type Description Default username str A string. required password str A string. required client Application Application model instances. required request Request is not a Django HttpRequest object. required args Tuple Tuple of extra argument. () kwargs Dict Dict of extra keyword argument. {} Returns: Type Description bool bool Source code in etp/validators.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def validate_user ( self : \"AxesOAuth2Validator\" , username : str , password : str , client : Application , request : Request , * args : Tuple , ** kwargs : Dict ) -> bool : \"\"\"Check username and password correspond to a valid and active User. Set defaults for necessary request object attributes for Axes compatibility. Args: username: A string. password: A string. client: Application model instances. request: is not a Django HttpRequest object. args: Tuple of extra argument. kwargs: Dict of extra keyword argument. Returns: bool \"\"\" _request = request if request and not isinstance ( request , HttpRequest ): request = HttpRequest () request . uri = _request . uri request . method = request . http_method = _request . http_method request . META = request . headers = _request . headers request . _params = _request . _params request . decoded_body = _request . decoded_body request . axes_ip_address = get_client_ip_address ( request ) request . axes_user_agent = get_client_user_agent ( request ) body = QueryDict ( str ( _request . body ), mutable = True ) if request . method == \"GET\" : request . GET = body elif request . method == \"POST\" : request . POST = body user = authenticate ( request = request , username = username , password = password ) if user is not None and user . is_active : request = _request request . user = user return True return False","title":"Validationrs"},{"location":"reference/validators/#etp.validators","text":"Collection of validators.","title":"etp.validators"},{"location":"reference/validators/#etp.validators.AxesOAuth2Validator","text":"Django axes validator for Django OAuth Toolkit.","title":"AxesOAuth2Validator"},{"location":"reference/validators/#etp.validators.AxesOAuth2Validator.validate_user","text":"Check username and password correspond to a valid and active User. Set defaults for necessary request object attributes for Axes compatibility. Parameters: Name Type Description Default username str A string. required password str A string. required client Application Application model instances. required request Request is not a Django HttpRequest object. required args Tuple Tuple of extra argument. () kwargs Dict Dict of extra keyword argument. {} Returns: Type Description bool bool Source code in etp/validators.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def validate_user ( self : \"AxesOAuth2Validator\" , username : str , password : str , client : Application , request : Request , * args : Tuple , ** kwargs : Dict ) -> bool : \"\"\"Check username and password correspond to a valid and active User. Set defaults for necessary request object attributes for Axes compatibility. Args: username: A string. password: A string. client: Application model instances. request: is not a Django HttpRequest object. args: Tuple of extra argument. kwargs: Dict of extra keyword argument. Returns: bool \"\"\" _request = request if request and not isinstance ( request , HttpRequest ): request = HttpRequest () request . uri = _request . uri request . method = request . http_method = _request . http_method request . META = request . headers = _request . headers request . _params = _request . _params request . decoded_body = _request . decoded_body request . axes_ip_address = get_client_ip_address ( request ) request . axes_user_agent = get_client_user_agent ( request ) body = QueryDict ( str ( _request . body ), mutable = True ) if request . method == \"GET\" : request . GET = body elif request . method == \"POST\" : request . POST = body user = authenticate ( request = request , username = username , password = password ) if user is not None and user . is_active : request = _request request . user = user return True return False","title":"validate_user()"},{"location":"reference/views/","text":"\u00b6 View for the etp project. home ( request ) \u00b6 View that will redirect to the home page. Source code in etp/views.py 10 11 12 13 14 def home ( request : WSGIRequest , ) -> Union [ HttpResponsePermanentRedirect , HttpResponseRedirect ]: \"\"\"View that will redirect to the home page.\"\"\" return redirect ( settings . HOME_PAGE_URL )","title":"Views"},{"location":"reference/views/#etp.views","text":"View for the etp project.","title":"etp.views"},{"location":"reference/views/#etp.views.home","text":"View that will redirect to the home page. Source code in etp/views.py 10 11 12 13 14 def home ( request : WSGIRequest , ) -> Union [ HttpResponsePermanentRedirect , HttpResponseRedirect ]: \"\"\"View that will redirect to the home page.\"\"\" return redirect ( settings . HOME_PAGE_URL )","title":"home()"},{"location":"reference/users/adapter/","text":"\u00b6 Collection django-allauth adapter. CustomAccountAdapter \u00b6 Custom account adapter. clean_email ( self , email ) \u00b6 Extra validation for email. Parameters: Name Type Description Default email str Email to check. required Returns: Type Description str email if it valid or raise exception Source code in users/adapter.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def clean_email ( self : \"CustomAccountAdapter\" , email : str ) -> str : \"\"\"Extra validation for email. Args: email: Email to check. Returns: email if it valid or raise exception Raises: ValidationError If email is not valid. \"\"\" email = super () . clean_email ( email ) local_part , domain = email . split ( \"@\" ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError , ) return email clean_username ( self , username , shallow = False ) \u00b6 Extra validation for username. Parameters: Name Type Description Default username str Username to check. required shallow bool bool field. False Returns: Type Description str username if it valid or raise exception Source code in users/adapter.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def clean_username ( self : \"CustomAccountAdapter\" , username : str , shallow : bool = False ) -> str : \"\"\"Extra validation for username. Args: username: Username to check. shallow: bool field. Returns: username if it valid or raise exception Raises: ValidationError If username is not valid. \"\"\" username = super () . clean_username ( username , shallow ) validate_reserved_name ( value = username , exception_class = ValidationError ) validate_confusables ( value = username , exception_class = ValidationError ) return username save_user ( self , request , user , form , commit = False ) \u00b6 Extra validation for email. Parameters: Name Type Description Default request Request Request object required user Any ? required form Any ? required commit bool bool field to indicted when to commit. False Returns: Type Description Any user object Source code in users/adapter.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def save_user ( self : \"CustomAccountAdapter\" , request : Request , user : Any , form : Any , commit : bool = False , ) -> Any : \"\"\"Extra validation for email. Args: request: Request object user: ? form: ? commit: bool field to indicted when to commit. Returns: user object \"\"\" user = super () . save_user ( request , user , form , commit ) data = form . cleaned_data user . phone_number = data . get ( \"phone_number\" ) user . full_name = data . get ( \"full_name\" ) user . picture = data . get ( \"picture\" ) user . save () return user","title":"Adapter"},{"location":"reference/users/adapter/#users.adapter","text":"Collection django-allauth adapter.","title":"users.adapter"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter","text":"Custom account adapter.","title":"CustomAccountAdapter"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter.clean_email","text":"Extra validation for email. Parameters: Name Type Description Default email str Email to check. required Returns: Type Description str email if it valid or raise exception Source code in users/adapter.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def clean_email ( self : \"CustomAccountAdapter\" , email : str ) -> str : \"\"\"Extra validation for email. Args: email: Email to check. Returns: email if it valid or raise exception Raises: ValidationError If email is not valid. \"\"\" email = super () . clean_email ( email ) local_part , domain = email . split ( \"@\" ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError , ) return email","title":"clean_email()"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter.clean_username","text":"Extra validation for username. Parameters: Name Type Description Default username str Username to check. required shallow bool bool field. False Returns: Type Description str username if it valid or raise exception Source code in users/adapter.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def clean_username ( self : \"CustomAccountAdapter\" , username : str , shallow : bool = False ) -> str : \"\"\"Extra validation for username. Args: username: Username to check. shallow: bool field. Returns: username if it valid or raise exception Raises: ValidationError If username is not valid. \"\"\" username = super () . clean_username ( username , shallow ) validate_reserved_name ( value = username , exception_class = ValidationError ) validate_confusables ( value = username , exception_class = ValidationError ) return username","title":"clean_username()"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter.save_user","text":"Extra validation for email. Parameters: Name Type Description Default request Request Request object required user Any ? required form Any ? required commit bool bool field to indicted when to commit. False Returns: Type Description Any user object Source code in users/adapter.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def save_user ( self : \"CustomAccountAdapter\" , request : Request , user : Any , form : Any , commit : bool = False , ) -> Any : \"\"\"Extra validation for email. Args: request: Request object user: ? form: ? commit: bool field to indicted when to commit. Returns: user object \"\"\" user = super () . save_user ( request , user , form , commit ) data = form . cleaned_data user . phone_number = data . get ( \"phone_number\" ) user . full_name = data . get ( \"full_name\" ) user . picture = data . get ( \"picture\" ) user . save () return user","title":"save_user()"},{"location":"reference/users/admin/","text":"\u00b6 Admin module for users app. AddressInline \u00b6 Inline for Address model. model \u00b6 Reference address model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 142 143 144 def __str__ ( self : \"Address\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } address\" BusinessAdmin \u00b6 Configure the business in admin page. make_accepted ( self , request , queryset ) \u00b6 Custom action that update the status of business to Accepted. Source code in users/admin.py 262 263 264 265 266 267 def make_accepted ( self : \"BusinessAdmin\" , request : WSGIRequest , queryset : QuerySet ) -> None : \"\"\"Custom action that update the status of business to Accepted.\"\"\" queryset . update ( status = \"Accepted\" ) queryset . update ( is_active = True ) make_deny ( self , request , queryset ) \u00b6 Custom action that update the status of business to Deny. Source code in users/admin.py 269 270 271 272 273 274 def make_deny ( self : \"BusinessAdmin\" , request : WSGIRequest , queryset : QuerySet ) -> None : \"\"\"Custom action that update the status of business to Deny.\"\"\" queryset . update ( status = \"Deny\" ) queryset . update ( is_active = False ) CustomUserAdmin \u00b6 Configure the users app in admin page. add_form \u00b6 Custom form for users creation form in admin page. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" form \u00b6 Custom form for users change form in admin page. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" resource_class \u00b6 ModelResource is Resource subclass for handling Django models. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" get_form ( self , request , obj = None , ** kwargs ) \u00b6 Override the default form. Source code in users/admin.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 def get_form ( self : \"CustomUserAdmin\" , request : WSGIRequest , obj : Optional [ CustomUser ] = None , ** kwargs : Dict , ) -> ModelFormMetaclass : \"\"\"Override the default form.\"\"\" form = super () . get_form ( request , obj , ** kwargs ) is_superuser = request . user . is_superuser disabled_fields = set () if not is_superuser : disabled_fields |= { \"is_superuser\" , \"is_staff\" , \"is_active\" , \"groups\" , \"user_permissions\" , } for field in disabled_fields : if field in form . base_fields : form . base_fields [ field ] . disabled = True return form rendered_picture ( self , obj ) \u00b6 A function that render the picture in django admin page. Source code in users/admin.py 152 153 154 155 156 def rendered_picture ( self : \"CustomUserAdmin\" , obj : \"CustomUser\" ) -> str : \"\"\"A function that render the picture in django admin page.\"\"\" return mark_safe ( # noqa S703 f '<img src=\" { obj . picture . url } \" width=40 height=40 style=\"border-radius: 9999px;\"/>' # noqa B950 ) FingerprintInline \u00b6 Inline for Fingerprint model. model \u00b6 Reference fingerprint model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 168 169 170 def __str__ ( self : \"Fingerprint\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } fingerprint\" RenewAdmin \u00b6 Configure the renew in admin page. make_accepted ( self , request , queryset ) \u00b6 Custom action that update the status of renew to Accepted. Source code in users/admin.py 213 214 215 216 217 218 219 220 221 222 223 224 225 def make_accepted ( self : \"RenewAdmin\" , request : WSGIRequest , queryset : QuerySet ) -> None : \"\"\"Custom action that update the status of renew to Accepted.\"\"\" renew_request = queryset . first () user = renew_request . user user . expired_at = renew_request . create_at + timezone . timedelta ( days = 365 ) user . save () queryset . update ( status = \"Accepted\" ) UserResource \u00b6 ModelResource is Resource subclass for handling Django models. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"Admin"},{"location":"reference/users/admin/#users.admin","text":"Admin module for users app.","title":"users.admin"},{"location":"reference/users/admin/#users.admin.AddressInline","text":"Inline for Address model.","title":"AddressInline"},{"location":"reference/users/admin/#users.admin.AddressInline.model","text":"Reference address model.","title":"model"},{"location":"reference/users/admin/#users.admin.AddressInline.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 142 143 144 def __str__ ( self : \"Address\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } address\"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.BusinessAdmin","text":"Configure the business in admin page.","title":"BusinessAdmin"},{"location":"reference/users/admin/#users.admin.BusinessAdmin.make_accepted","text":"Custom action that update the status of business to Accepted. Source code in users/admin.py 262 263 264 265 266 267 def make_accepted ( self : \"BusinessAdmin\" , request : WSGIRequest , queryset : QuerySet ) -> None : \"\"\"Custom action that update the status of business to Accepted.\"\"\" queryset . update ( status = \"Accepted\" ) queryset . update ( is_active = True )","title":"make_accepted()"},{"location":"reference/users/admin/#users.admin.BusinessAdmin.make_deny","text":"Custom action that update the status of business to Deny. Source code in users/admin.py 269 270 271 272 273 274 def make_deny ( self : \"BusinessAdmin\" , request : WSGIRequest , queryset : QuerySet ) -> None : \"\"\"Custom action that update the status of business to Deny.\"\"\" queryset . update ( status = \"Deny\" ) queryset . update ( is_active = False )","title":"make_deny()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin","text":"Configure the users app in admin page.","title":"CustomUserAdmin"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.add_form","text":"Custom form for users creation form in admin page.","title":"add_form"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.add_form.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.add_form.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.add_form.Meta.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.add_form.Meta.model.age","text":"A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.form","text":"Custom form for users change form in admin page.","title":"form"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.form.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.form.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.form.Meta.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.form.Meta.model.age","text":"A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.model","text":"Reference user model.","title":"model"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.model.age","text":"A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.resource_class","text":"ModelResource is Resource subclass for handling Django models.","title":"resource_class"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.resource_class.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.resource_class.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.resource_class.Meta.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.resource_class.Meta.model.age","text":"A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.get_form","text":"Override the default form. Source code in users/admin.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 def get_form ( self : \"CustomUserAdmin\" , request : WSGIRequest , obj : Optional [ CustomUser ] = None , ** kwargs : Dict , ) -> ModelFormMetaclass : \"\"\"Override the default form.\"\"\" form = super () . get_form ( request , obj , ** kwargs ) is_superuser = request . user . is_superuser disabled_fields = set () if not is_superuser : disabled_fields |= { \"is_superuser\" , \"is_staff\" , \"is_active\" , \"groups\" , \"user_permissions\" , } for field in disabled_fields : if field in form . base_fields : form . base_fields [ field ] . disabled = True return form","title":"get_form()"},{"location":"reference/users/admin/#users.admin.CustomUserAdmin.rendered_picture","text":"A function that render the picture in django admin page. Source code in users/admin.py 152 153 154 155 156 def rendered_picture ( self : \"CustomUserAdmin\" , obj : \"CustomUser\" ) -> str : \"\"\"A function that render the picture in django admin page.\"\"\" return mark_safe ( # noqa S703 f '<img src=\" { obj . picture . url } \" width=40 height=40 style=\"border-radius: 9999px;\"/>' # noqa B950 )","title":"rendered_picture()"},{"location":"reference/users/admin/#users.admin.FingerprintInline","text":"Inline for Fingerprint model.","title":"FingerprintInline"},{"location":"reference/users/admin/#users.admin.FingerprintInline.model","text":"Reference fingerprint model.","title":"model"},{"location":"reference/users/admin/#users.admin.FingerprintInline.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 168 169 170 def __str__ ( self : \"Fingerprint\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } fingerprint\"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.RenewAdmin","text":"Configure the renew in admin page.","title":"RenewAdmin"},{"location":"reference/users/admin/#users.admin.RenewAdmin.make_accepted","text":"Custom action that update the status of renew to Accepted. Source code in users/admin.py 213 214 215 216 217 218 219 220 221 222 223 224 225 def make_accepted ( self : \"RenewAdmin\" , request : WSGIRequest , queryset : QuerySet ) -> None : \"\"\"Custom action that update the status of renew to Accepted.\"\"\" renew_request = queryset . first () user = renew_request . user user . expired_at = renew_request . create_at + timezone . timedelta ( days = 365 ) user . save () queryset . update ( status = \"Accepted\" )","title":"make_accepted()"},{"location":"reference/users/admin/#users.admin.UserResource","text":"ModelResource is Resource subclass for handling Django models.","title":"UserResource"},{"location":"reference/users/admin/#users.admin.UserResource.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/admin/#users.admin.UserResource.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/admin/#users.admin.UserResource.Meta.model.__str__","text":"It return readable name for the model. Source code in users/admin.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/admin/#users.admin.UserResource.Meta.model.age","text":"A function that display age of user in django admin page. Source code in users/admin.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/context_processors/","text":"\u00b6 Collection of template processor. from_settings ( request ) \u00b6 Custom template processor to show current env. Source code in users/context_processors.py 8 9 10 11 12 13 def from_settings ( request : Request ) -> Dict [ str , Any ]: \"\"\"Custom template processor to show current env.\"\"\" return { \"ENVIRONMENT_NAME\" : settings . ENVIRONMENT_NAME , \"ENVIRONMENT_COLOR\" : settings . ENVIRONMENT_COLOR , }","title":"Context Processors"},{"location":"reference/users/context_processors/#users.context_processors","text":"Collection of template processor.","title":"users.context_processors"},{"location":"reference/users/context_processors/#users.context_processors.from_settings","text":"Custom template processor to show current env. Source code in users/context_processors.py 8 9 10 11 12 13 def from_settings ( request : Request ) -> Dict [ str , Any ]: \"\"\"Custom template processor to show current env.\"\"\" return { \"ENVIRONMENT_NAME\" : settings . ENVIRONMENT_NAME , \"ENVIRONMENT_COLOR\" : settings . ENVIRONMENT_COLOR , }","title":"from_settings()"},{"location":"reference/users/forms/","text":"\u00b6 Collection of forms. CustomUserChangeForm \u00b6 Custom form for users change form in admin page. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/forms.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/forms.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" CustomUserCreationForm \u00b6 Custom form for users creation form in admin page. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/forms.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/forms.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" UserAdminForm \u00b6 Custom form for users form in admin page. clean_email ( self ) \u00b6 Extra validation for email. Source code in users/forms.py 29 30 31 32 33 34 35 36 37 38 39 40 41 def clean_email ( self : \"UserAdminForm\" ) -> Any : \"\"\"Extra validation for email.\"\"\" email = self . data . get ( \"email\" ) local_part , domain = self . data . get ( \"email\" ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError ) validate_reserved_name ( value = email , exception_class = ValidationError ) return self . cleaned_data [ \"email\" ] clean_username ( self ) \u00b6 Extra validation for username. Source code in users/forms.py 19 20 21 22 23 24 25 26 27 def clean_username ( self : \"UserAdminForm\" ) -> Any : \"\"\"Extra validation for username.\"\"\" username = self . data . get ( \"username\" ) validate_confusables ( value = username , exception_class = ValidationError ) validate_reserved_name ( value = username , exception_class = ValidationError ) return self . cleaned_data [ \"username\" ]","title":"Forms"},{"location":"reference/users/forms/#users.forms","text":"Collection of forms.","title":"users.forms"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm","text":"Custom form for users change form in admin page.","title":"CustomUserChangeForm"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta.model.__str__","text":"It return readable name for the model. Source code in users/forms.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta.model.age","text":"A function that display age of user in django admin page. Source code in users/forms.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm","text":"Custom form for users creation form in admin page.","title":"CustomUserCreationForm"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta.model.__str__","text":"It return readable name for the model. Source code in users/forms.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta.model.age","text":"A function that display age of user in django admin page. Source code in users/forms.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/forms/#users.forms.UserAdminForm","text":"Custom form for users form in admin page.","title":"UserAdminForm"},{"location":"reference/users/forms/#users.forms.UserAdminForm.clean_email","text":"Extra validation for email. Source code in users/forms.py 29 30 31 32 33 34 35 36 37 38 39 40 41 def clean_email ( self : \"UserAdminForm\" ) -> Any : \"\"\"Extra validation for email.\"\"\" email = self . data . get ( \"email\" ) local_part , domain = self . data . get ( \"email\" ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError ) validate_reserved_name ( value = email , exception_class = ValidationError ) return self . cleaned_data [ \"email\" ]","title":"clean_email()"},{"location":"reference/users/forms/#users.forms.UserAdminForm.clean_username","text":"Extra validation for username. Source code in users/forms.py 19 20 21 22 23 24 25 26 27 def clean_username ( self : \"UserAdminForm\" ) -> Any : \"\"\"Extra validation for username.\"\"\" username = self . data . get ( \"username\" ) validate_confusables ( value = username , exception_class = ValidationError ) validate_reserved_name ( value = username , exception_class = ValidationError ) return self . cleaned_data [ \"username\" ]","title":"clean_username()"},{"location":"reference/users/models/","text":"\u00b6 Collection of model. Address \u00b6 Reference address model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/models.py 142 143 144 def __str__ ( self : \"Address\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } address\" Business \u00b6 Reference business model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/models.py 248 249 250 def __str__ ( self : \"Business\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . name } \" BusinessType \u00b6 Enum class for Business Type. CustomUser \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/models.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" age ( self ) \u00b6 A function that display age of user in django admin page. Source code in users/models.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\" Fingerprint \u00b6 Reference fingerprint model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/models.py 168 169 170 def __str__ ( self : \"Fingerprint\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } fingerprint\" Renew \u00b6 Reference renew model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/models.py 199 200 201 def __str__ ( self : \"Renew\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } ask for renew\" Status \u00b6 Enum class for Status. event_pin ( sender , instance , ** kwargs ) \u00b6 Signal for CustomUser. Source code in users/models.py 253 254 255 256 257 @receiver ( pre_save , sender = CustomUser ) def event_pin ( sender : CustomUser , instance : CustomUser , ** kwargs : Any ) -> None : \"\"\"Signal for CustomUser.\"\"\" if not instance . pin : instance . pin = unique_personal_identity_number () fingerprint_upload_to ( instance , filename ) \u00b6 A help Function to change the image upload path. Parameters: Name Type Description Default instance Fingerprint django model required filename str the uploaded file name required Returns: Type Description str path in string format Source code in users/models.py 29 30 31 32 33 34 35 36 37 38 39 def fingerprint_upload_to ( instance : \"Fingerprint\" , filename : str ) -> str : \"\"\"A help Function to change the image upload path. Args: instance: django model filename: the uploaded file name Returns: path in string format \"\"\" return f \"images/profile_pics/ { instance . user . username } /fingerprint/ { filename } \" user_upload_to ( instance , filename ) \u00b6 A help Function to change the image upload path. Parameters: Name Type Description Default instance CustomUser django model required filename str the uploaded file name required Returns: Type Description str path in string format Source code in users/models.py 16 17 18 19 20 21 22 23 24 25 26 def user_upload_to ( instance : \"CustomUser\" , filename : str ) -> str : \"\"\"A help Function to change the image upload path. Args: instance: django model filename: the uploaded file name Returns: path in string format \"\"\" return f \"images/profile_pics/ { instance . username } / { filename } \"","title":"Models"},{"location":"reference/users/models/#users.models","text":"Collection of model.","title":"users.models"},{"location":"reference/users/models/#users.models.Address","text":"Reference address model.","title":"Address"},{"location":"reference/users/models/#users.models.Address.__str__","text":"It return readable name for the model. Source code in users/models.py 142 143 144 def __str__ ( self : \"Address\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } address\"","title":"__str__()"},{"location":"reference/users/models/#users.models.Business","text":"Reference business model.","title":"Business"},{"location":"reference/users/models/#users.models.Business.__str__","text":"It return readable name for the model. Source code in users/models.py 248 249 250 def __str__ ( self : \"Business\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . name } \"","title":"__str__()"},{"location":"reference/users/models/#users.models.BusinessType","text":"Enum class for Business Type.","title":"BusinessType"},{"location":"reference/users/models/#users.models.CustomUser","text":"Reference user model.","title":"CustomUser"},{"location":"reference/users/models/#users.models.CustomUser.__str__","text":"It return readable name for the model. Source code in users/models.py 103 104 105 def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/models/#users.models.CustomUser.age","text":"A function that display age of user in django admin page. Source code in users/models.py 107 108 109 110 111 112 113 114 def age ( self : \"CustomUser\" ) -> str : \"\"\"A function that display age of user in django admin page.\"\"\" try : return f \" { timezone . now () . year - self . date_of_birth . year } \" except Exception as error : print ( error ) return \"\"","title":"age()"},{"location":"reference/users/models/#users.models.Fingerprint","text":"Reference fingerprint model.","title":"Fingerprint"},{"location":"reference/users/models/#users.models.Fingerprint.__str__","text":"It return readable name for the model. Source code in users/models.py 168 169 170 def __str__ ( self : \"Fingerprint\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } fingerprint\"","title":"__str__()"},{"location":"reference/users/models/#users.models.Renew","text":"Reference renew model.","title":"Renew"},{"location":"reference/users/models/#users.models.Renew.__str__","text":"It return readable name for the model. Source code in users/models.py 199 200 201 def __str__ ( self : \"Renew\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . user } ask for renew\"","title":"__str__()"},{"location":"reference/users/models/#users.models.Status","text":"Enum class for Status.","title":"Status"},{"location":"reference/users/models/#users.models.event_pin","text":"Signal for CustomUser. Source code in users/models.py 253 254 255 256 257 @receiver ( pre_save , sender = CustomUser ) def event_pin ( sender : CustomUser , instance : CustomUser , ** kwargs : Any ) -> None : \"\"\"Signal for CustomUser.\"\"\" if not instance . pin : instance . pin = unique_personal_identity_number ()","title":"event_pin()"},{"location":"reference/users/models/#users.models.fingerprint_upload_to","text":"A help Function to change the image upload path. Parameters: Name Type Description Default instance Fingerprint django model required filename str the uploaded file name required Returns: Type Description str path in string format Source code in users/models.py 29 30 31 32 33 34 35 36 37 38 39 def fingerprint_upload_to ( instance : \"Fingerprint\" , filename : str ) -> str : \"\"\"A help Function to change the image upload path. Args: instance: django model filename: the uploaded file name Returns: path in string format \"\"\" return f \"images/profile_pics/ { instance . user . username } /fingerprint/ { filename } \"","title":"fingerprint_upload_to()"},{"location":"reference/users/models/#users.models.user_upload_to","text":"A help Function to change the image upload path. Parameters: Name Type Description Default instance CustomUser django model required filename str the uploaded file name required Returns: Type Description str path in string format Source code in users/models.py 16 17 18 19 20 21 22 23 24 25 26 def user_upload_to ( instance : \"CustomUser\" , filename : str ) -> str : \"\"\"A help Function to change the image upload path. Args: instance: django model filename: the uploaded file name Returns: path in string format \"\"\" return f \"images/profile_pics/ { instance . username } / { filename } \"","title":"user_upload_to()"},{"location":"reference/users/permissions/","text":"\u00b6 Collection permissions. IsNotAuthenticated \u00b6 Allows access only to unauthenticated users. has_permission ( self , request , view ) \u00b6 Check if user is anonymous. Parameters: Name Type Description Default request Request Request object required view Any Any type of view required Returns: Type Description bool If user is anonymous it return True otherwise it false Source code in users/permissions.py 36 37 38 39 40 41 42 43 44 45 46 def has_permission ( self : \"IsNotAuthenticated\" , request : Request , view : Any ) -> bool : \"\"\"Check if user is anonymous. Args: request: Request object view: Any type of view Returns: If user is anonymous it return True otherwise it false \"\"\" return not bool ( request . user and request . user . is_authenticated ) IsOwnerOrReadOnly \u00b6 Allows full access to object owner otherwise read only. has_object_permission ( self , request , view , obj ) \u00b6 Checking if user have object level permission. Parameters: Name Type Description Default request Request Request object required view Any Any type of view required obj Any Any django model required Returns: Type Description bool If user is owner of the object it return True otherwise it false Source code in users/permissions.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def has_object_permission ( self : \"IsOwnerOrReadOnly\" , request : Request , view : Any , obj : Any ) -> bool : \"\"\"Checking if user have object level permission. Args: request: Request object view: Any type of view obj: Any django model Returns: If user is owner of the object it return True otherwise it false \"\"\" if request . method in permissions . SAFE_METHODS : return True return obj == request . user","title":"Permissions"},{"location":"reference/users/permissions/#users.permissions","text":"Collection permissions.","title":"users.permissions"},{"location":"reference/users/permissions/#users.permissions.IsNotAuthenticated","text":"Allows access only to unauthenticated users.","title":"IsNotAuthenticated"},{"location":"reference/users/permissions/#users.permissions.IsNotAuthenticated.has_permission","text":"Check if user is anonymous. Parameters: Name Type Description Default request Request Request object required view Any Any type of view required Returns: Type Description bool If user is anonymous it return True otherwise it false Source code in users/permissions.py 36 37 38 39 40 41 42 43 44 45 46 def has_permission ( self : \"IsNotAuthenticated\" , request : Request , view : Any ) -> bool : \"\"\"Check if user is anonymous. Args: request: Request object view: Any type of view Returns: If user is anonymous it return True otherwise it false \"\"\" return not bool ( request . user and request . user . is_authenticated )","title":"has_permission()"},{"location":"reference/users/permissions/#users.permissions.IsOwnerOrReadOnly","text":"Allows full access to object owner otherwise read only.","title":"IsOwnerOrReadOnly"},{"location":"reference/users/permissions/#users.permissions.IsOwnerOrReadOnly.has_object_permission","text":"Checking if user have object level permission. Parameters: Name Type Description Default request Request Request object required view Any Any type of view required obj Any Any django model required Returns: Type Description bool If user is owner of the object it return True otherwise it false Source code in users/permissions.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def has_object_permission ( self : \"IsOwnerOrReadOnly\" , request : Request , view : Any , obj : Any ) -> bool : \"\"\"Checking if user have object level permission. Args: request: Request object view: Any type of view obj: Any django model Returns: If user is owner of the object it return True otherwise it false \"\"\" if request . method in permissions . SAFE_METHODS : return True return obj == request . user","title":"has_object_permission()"},{"location":"reference/users/utils/","text":"\u00b6 Collection of utils functions. unique_personal_identity_number () \u00b6 Create unique personal identity number. Source code in users/utils.py 6 7 8 9 def unique_personal_identity_number () -> str : \"\"\"Create unique personal identity number.\"\"\" number = \"\" . join ( secrets . choice ( string . digits ) for _ in range ( 12 )) return f \" { number [: 3 ] } - { number [ 3 : 6 ] } - { number [ 6 : 9 ] } - { number [ 9 : 12 ] } \"","title":"Utils"},{"location":"reference/users/utils/#users.utils","text":"Collection of utils functions.","title":"users.utils"},{"location":"reference/users/utils/#users.utils.unique_personal_identity_number","text":"Create unique personal identity number. Source code in users/utils.py 6 7 8 9 def unique_personal_identity_number () -> str : \"\"\"Create unique personal identity number.\"\"\" number = \"\" . join ( secrets . choice ( string . digits ) for _ in range ( 12 )) return f \" { number [: 3 ] } - { number [ 3 : 6 ] } - { number [ 6 : 9 ] } - { number [ 9 : 12 ] } \"","title":"unique_personal_identity_number()"},{"location":"reference/users/validators/","text":"\u00b6 Reusable validators. validate_confusables ( * , value , exception_class ) \u00b6 Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class required Examples: 1 2 3 4 5 6 7 >>> from users import validators >>> validators . validate_confusables ( value = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This name cannot be registered . Please choose a different name . >>> validators . validate_confusables ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def validate_confusables ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Args: value: string. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables(value=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This name cannot be registered.Please choose a different name. >>> validators.validate_confusables(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( value ): raise exception_class ( CONFUSABLE , code = _ ( \"invalid\" )) validate_confusables_email ( * , local_part , domain , exception_class ) \u00b6 Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default local_part str the local part of the email addres, before @. required domain str the domain part of the email addres, after @. required exception_class Callable Callable Exception class required Examples: 1 2 3 4 5 6 7 >>> from users import validators >>> validators . validate_confusables_email ( local_part = \"\u0391laskaJazz\" , domain = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This email address cannot be registered . Please supply a different email address . >>> validators . validate_confusables_email ( local_part = \"123\" , domain = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def validate_confusables_email ( * , local_part : str , domain : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Args: local_part: the local part of the email addres, before @. domain: the domain part of the email addres, after @. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables_email(local_part=\"\u0391laskaJazz\", domain=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This email address cannot be registered. Please supply a different email address. >>> validators.validate_confusables_email(local_part=\"123\", domain=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( local_part ) or confusables . is_dangerous ( domain ): raise exception_class ( CONFUSABLE_EMAIL , code = _ ( \"invalid\" )) validate_reserved_name ( * , value , exception_class ) \u00b6 Disallows many reserved names as form field values. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class. required Examples: 1 2 3 4 5 6 7 >>> from users import validators >>> validators . validate_reserved_name ( value = \"admin\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : admin is reserved and cannot be registered . >>> validators . validate_reserved_name ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 def validate_reserved_name ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows many reserved names as form field values. Args: value: string. exception_class: Callable Exception class. Examples: >>> from users import validators >>> validators.validate_reserved_name(value=\"admin\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: admin is reserved and cannot be registered. >>> validators.validate_reserved_name(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if value in DEFAULT_RESERVED_NAMES or value . startswith ( \".well-known\" ): raise exception_class ( f \" { value } is reserved and cannot be registered.\" )","title":"Validators"},{"location":"reference/users/validators/#users.validators","text":"Reusable validators.","title":"users.validators"},{"location":"reference/users/validators/#users.validators.validate_confusables","text":"Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class required Examples: 1 2 3 4 5 6 7 >>> from users import validators >>> validators . validate_confusables ( value = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This name cannot be registered . Please choose a different name . >>> validators . validate_confusables ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def validate_confusables ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Args: value: string. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables(value=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This name cannot be registered.Please choose a different name. >>> validators.validate_confusables(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( value ): raise exception_class ( CONFUSABLE , code = _ ( \"invalid\" ))","title":"validate_confusables()"},{"location":"reference/users/validators/#users.validators.validate_confusables_email","text":"Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default local_part str the local part of the email addres, before @. required domain str the domain part of the email addres, after @. required exception_class Callable Callable Exception class required Examples: 1 2 3 4 5 6 7 >>> from users import validators >>> validators . validate_confusables_email ( local_part = \"\u0391laskaJazz\" , domain = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This email address cannot be registered . Please supply a different email address . >>> validators . validate_confusables_email ( local_part = \"123\" , domain = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def validate_confusables_email ( * , local_part : str , domain : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Args: local_part: the local part of the email addres, before @. domain: the domain part of the email addres, after @. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables_email(local_part=\"\u0391laskaJazz\", domain=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This email address cannot be registered. Please supply a different email address. >>> validators.validate_confusables_email(local_part=\"123\", domain=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( local_part ) or confusables . is_dangerous ( domain ): raise exception_class ( CONFUSABLE_EMAIL , code = _ ( \"invalid\" ))","title":"validate_confusables_email()"},{"location":"reference/users/validators/#users.validators.validate_reserved_name","text":"Disallows many reserved names as form field values. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class. required Examples: 1 2 3 4 5 6 7 >>> from users import validators >>> validators . validate_reserved_name ( value = \"admin\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : admin is reserved and cannot be registered . >>> validators . validate_reserved_name ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 def validate_reserved_name ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows many reserved names as form field values. Args: value: string. exception_class: Callable Exception class. Examples: >>> from users import validators >>> validators.validate_reserved_name(value=\"admin\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: admin is reserved and cannot be registered. >>> validators.validate_reserved_name(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if value in DEFAULT_RESERVED_NAMES or value . startswith ( \".well-known\" ): raise exception_class ( f \" { value } is reserved and cannot be registered.\" )","title":"validate_reserved_name()"}]}